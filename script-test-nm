#!/bin/bash
# ./script-test.sh nom_du_ressource_groupe numéro_MENU

# PREREQUIS INSTALLER LA LIBRAIRIE JQ ! apt install jq

# PAS DE MAJUSCULE POUR LES VARIABLES
NOMVM="debian-gr4"
NOMGR="$1" # CHANGER LE NOM
ADMINUSER="adminuser"
NOMVNET="vnetgr4"
NOMBASTION="bastiongr4"
NOMDISK="diskgr4"
FQDN="$NOMGR" # nom du groupe pour le FQDN ou changer par "le-nom"
LOCAL="japaneast"
RSA="@authorized_keys" # "$HOME/.ssh/id_rsa.pub"
RETVAL=

MENU=$2
####################################
#            M E N U               #
# 0 Installe tout                  #
# 1 Installe à partir du réseau    #
# 2 Installe à partir du Bastion   #
# 3 Installe à partir de la VM     #
# 4 Création du disque additionel  #
# 5 Connection ssh/bastion à la VM #
# 6 Certbot TLS                    #
# 7 Service Backup                 #
####################################
# 9 Tout effacer                   #
####################################

# Efface les ressources sur azure
rollback() {
    desc="$1"
    echo "Erreur lié à $desc"
    if [ ! -z "$ITEMID" ]; then
        az backup protection disable --ids "$ITEMID" --delete-backup-data -y
    fi
    if [ ! -z "$VAULTID" ]; then
        az backup vault delete --resource-group "$NOMGR" --name myRecoveryServicesVault -y --force
    fi
    az group delete -n "$NOMGR" -y
    exit 0
}

# fonction d'execution de commandes
cmd() {
    command=$1
    desc=$2
    RETVAL=$($command)
    if [ $? -ne 0 ]; then
        rollback "$desc"
    fi
}

# création du réseau virtuel azure
create_network() {
    echo " Création du vnet"
    cmd "az network vnet create --resource-group $NOMGR --name $NOMVNET --address-prefix 10.0.0.0/16 --subnet-name AzureBastionSubnet --subnet-prefix 10.0.0.0/24 --location $LOCAL" "vnet"
    echo " Création de l'IP bastion"
    cmd "az network public-ip create --resource-group $NOMGR --name ipbastion --sku Standard --allocation-method Static --sku Standard --location $LOCAL" "ip pour bastion"
    echo " Création de l'IP VM"
    cmd "az network public-ip create --resource-group $NOMGR --name ipvm --sku Standard --allocation-method Static --sku Standard --dns-name $FQDN --location $LOCAL" "ip pour vm"
}

# création du service bastion
create_bastion() {
    echo " Création du bastion"
    cmd "az network bastion create --location $LOCAL --name $NOMBASTION --public-ip-address ipbastion --resource-group $NOMGR --vnet-name $NOMVNET" "Création_Bastion"
    BAS=$RETVAL
    IDBAST=$(echo "$BAS" | jq -r ".id")
}

# création de la vm et ouverture des ports sur le parefeu azure
create_vm() {
    echo " Création de la VM"
    cmd "az vm create -n $NOMVM -g $NOMGR --image Debian:debian-11:11:latest --ssh-key-values $RSA --generate-ssh-keys --public-ip-sku Standard --admin-username $ADMINUSER --vnet-name $NOMVNET --subnet-address-prefix 10.0.1.0/24 --public-ip-address ipvm --subnet SubVM --location $LOCAL" "création_VM"
    RES=$RETVAL
    IPVM=$(echo "$RES" | jq -r ".publicIpAddress")
    IDVM=$(echo "$RES" | jq -r ".id")
    echo "################################"
    echo "# IP DE LA VM : $IPVM  #"
    echo "################################"
    echo " Ouverture des ports 22, 8080, 443 et 80 "
    cmd "az vm open-port --port 80 --resource-group $NOMGR --name $NOMVM --priority 155" "ouverture port 80"
    cmd "az vm open-port --port 8080 --resource-group $NOMGR --name $NOMVM --priority 159" "ouverture port 8080"
    cmd "az vm open-port --port 22 --resource-group $NOMGR --name $NOMVM --priority 158" "ouverture port 22"
    cmd "az vm open-port --port 443 --resource-group $NOMGR --name $NOMVM --priority 157" "ouverture port 443"
    cmd "az extension add --name ssh" "disk ssh"
}

# fonction disque externe des données de logs et utilisateurs
create_disk() {
    echo " Création du disque"
    cmd "az disk create --name $NOMDISK --resource-group $NOMGR --size-gb 64 --location $LOCAL --encryption-type EncryptionAtRestWithPlatformKey" "création du disque"
    echo " Voir l'ID Disk"
    diskId=$(az disk show -g "$NOMGR" -n "$NOMDISK" --query 'id' -o tsv)
    #az vm disk attach -g $NOMGR --vm-name $NOMVM --name $diskId
    cmd "az vm disk attach -g $NOMGR --vm-name $NOMVM --name $diskId" "attachement du disque"
}

# fonction TSL
create_certbot() {
    echo " Installation du script Certbot :"
    out=$(az vm run-command invoke -g "$NOMGR" -n "$NOMVM" --command-id RunShellScript --scripts @install_certbot_apache.sh --parameters "$FQDN" "$LOCAL")
    echo "$out"
    echo " Connection à la VM via Bastion"
    az network bastion ssh --target-resource-id "$IDVM" --auth-type "ssh-key" --username "$ADMINUSER" --ssh-key "$HOME/.ssh/id_rsa.pub" --name "$NOMBASTION" --resource-group "$NOMGR"
}

# fonction d'installation de jenkins
create_connect() {
    echo " Installation du script Jenkins :"
    out=$(az vm run-command invoke -g "$NOMGR" -n "$NOMVM" --command-id RunShellScript --scripts @install_jenkins.sh)
    JENKEY=$(echo "$out" | jq -r '.value[0].message' | grep -B2 '\[stderr\]' | head -1)
    echo " Ouverture du tunneling"
    cmd "az resource update --ids $IDBAST --set properties.enableTunneling=True" "update des ressources"
    echo "############################################################"
    echo "# Installation OK, pour terminer :                         #"
    echo "# Aller sur :  http://$IPVM:8080                   #"
    echo "# Clée Jenkin : $JENKEY              #"
    echo "# Aller à http://$FQDN.$LOCAL.cloudapp.azure.com:8080  #"
    echo "############################################################"
}

# fonction de sauvegarde automatique
create_backup() {
    echo " Création de la sauvegarde/Backup :"
    az backup vault create --location "$LOCAL" --name MyRecoveryServicesVault --resource-group "$NOMGR"
    VAULTID=$(az backup vault -g "$NOMGR" | jq -r '.[].id')
    az resource update --ids ${vaultid}/backupconfig/vaultconfig --set properties.softDeleteFeatureState=disabled
    #az backup protection check-vm -g $NOMGR --vm $NOMVM
    az backup vault backup-properties set --name myRecoveryServicesVault --resource-group "$NOMGR" --backup-storage-redundancy LocallyRedundant
    az backup protection enable-for-vm --resource-group "$NOMGR" --vault-name myRecoveryServicesVault --vm "$NOMVM" --policy-name DefaultPolicy
    ITEMIDS=$(az backup item list -g "$NOMGR" -v myRecoveryServicesVault | jq -r '.[0].id')
}

if [[ $MENU -lt 1 ]]; then
    cmd "az group create --location $LOCAL --name $NOMGR" "création de groupe"
    echo "Création du ressource groupe: $NOMGR"
fi
if [[ $MENU -lt 2 ]]; then
    create_network
fi
if [[ $MENU -lt 3 ]]; then
    create_bastion
fi
if [[ $MENU -lt 4 ]]; then
    create_vm
fi
if [[ $MENU -lt 5 ]]; then
    create_disk
fi
if [[ $MENU -lt 6 ]]; then
    create_connect
fi
if [[ $MENU -lt 7 ]]; then
    create_certbot
fi
if [[ $MENU -lt 8 ]]; then
    create_backup
fi

if [[ $MENU -eq 9 ]]; then
    rollback "l'utilisateur du script"
fi

exit 0
